<?xml version="1.0" ?>
<script version="12.3.0.766">
    <description>Determines the components that contribute the most to the ACD value.</description>
    <source><![CDATA[Map sourceFileToDependsUpon = [:]
int maxDependsUpon = 0;

//Step 1 : Determine max 'depends upon' and collect all 'depends upon' values per source file.

IJavaVisitor v = javaAccess.createVisitor()

v.onSourceFile
{
    JavaSourceFileAccess nextSourceFile ->
    Number dependsUpon = nextSourceFile.getDependsUponSystemMetric()
    if(dependsUpon != null)
    {
        maxDependsUpon = Math.max(maxDependsUpon, dependsUpon.intValue())
        sourceFileToDependsUpon.put(nextSourceFile,dependsUpon)
    }
}

javaAccess.visitParserModel(v)

//Step 2: Determine max 'used from' and 'max relative impact',
//            collect all 'used from' values per source file,
//            collect all directly referenced source files per source file,
//            calculate the increase of 'depends upon' per source file,
//            calculate the 'relative impact' and associate the source files.

Map sourceFileToUsedFrom = [:]
Map sourceFileToReferenced = [:]
Map sourceFileToDependsUponIncrease = [:]
Map relativeImpactToSourceFiles = [:]
int maxUsedFrom = 0;
int maxRelativeImpact = 0;

for(nextEntry in sourceFileToDependsUpon)
{
    JavaSourceFileAccess nextFromSourceFile = nextEntry.key

    int nextMaxToDependsUpon = 0;
                
    List<ElementAccess> referenced = nextFromSourceFile.getReferencedElementsRecursively(Aggregator.SOURCE_FILE, true, true);         
    
    referenced.each
    {
        JavaSourceFileAccess nextToSourceFile ->
        
        Number nextToDependsUpon = sourceFileToDependsUpon.get(nextToSourceFile)
        if(nextToDependsUpon != null)
        {
            nextMaxToDependsUpon = Math.max(nextMaxToDependsUpon,nextToDependsUpon.intValue());
        }       
   }
        
   if(nextMaxToDependsUpon > 0)
   {
       sourceFileToReferenced.put(nextFromSourceFile, referenced)
       
       Number nextFromDependsUpon = nextEntry.value
       
       Number nextFromUsedFrom = nextFromSourceFile.getUsedFromSystemMetric()
       assert nextFromUsedFrom != null //If 'depends upon' was present we expect a 'used from' value too.
       sourceFileToUsedFrom.put(nextFromSourceFile, nextFromUsedFrom)
       maxUsedFrom = Math.max(maxUsedFrom, nextFromUsedFrom.intValue())
       
       float nextFromDependsUponIncrease = 1 - (float)nextMaxToDependsUpon/nextFromDependsUpon
       sourceFileToDependsUponIncrease.put(nextFromSourceFile, Float.valueOf(nextFromDependsUponIncrease))
       
       float nextFromRelativeImpact = nextFromDependsUponIncrease*nextFromDependsUpon*nextFromUsedFrom;
       Float nextFromRelativeImpactAsFloat = Float.valueOf(nextFromRelativeImpact)
       List<JavaSourceFileAccess> sourceFiles = relativeImpactToSourceFiles.get(nextFromRelativeImpactAsFloat);
       if(sourceFiles == null)
       {
           sourceFiles = [];
           relativeImpactToSourceFiles.put(nextFromRelativeImpactAsFloat,sourceFiles);
       }
       sourceFiles.add(nextFromSourceFile);
       
       maxRelativeImpact = Math.max(maxRelativeImpact, nextFromRelativeImpact)
    }
}

//Step 3: Create the result tree structure and map relative impact to scale of 10.

result.addNode("Max 'depends upon': "+maxDependsUpon +" - max 'used from': "+maxUsedFrom+" -  analyzed "+sourceFileToDependsUpon.size()+" source files")
NodeAccess above9 = result.addNode("Relative impact 9 and above'")
NodeAccess above8 = result.addNode("Relative impact 8 and above'")
NodeAccess above7 = result.addNode("Relative impact 7 and above'")
NodeAccess above6 = result.addNode("Relative impact 6 and above'")
NodeAccess above5 = result.addNode("Relative impact 5 and above'")
NodeAccess above4 = result.addNode("Relative impact 4 and above'")
NodeAccess above3 = result.addNode("Relative impact 3 and above'")
NodeAccess above2 = result.addNode("Relative impact 2 and above'")
NodeAccess above1 = result.addNode("Relative impact 1 and above'")

//Sort
relativeImpactToSourceFiles = relativeImpactToSourceFiles.sort{a, b -> b.key <=> a.key}

for(nextEntry in relativeImpactToSourceFiles)
{
    Float nextRelativeImpact = nextEntry.key
    float normalizedNextRelativeImpact = (nextRelativeImpact.floatValue()/maxRelativeImpact) * 10
    
    nextEntry.value.each
    {
        JavaSourceFileAccess nextSourceFile ->
        
        NodeAccess nextImpactNode = null
        if(normalizedNextRelativeImpact>=9)
        {
            nextImpactNode = result.addNode(above9, nextSourceFile);
        }        
        else if(normalizedNextRelativeImpact>=8)
        {
            nextImpactNode = result.addNode(above8, nextSourceFile);
        }        
        else if(normalizedNextRelativeImpact>=7)
        {
            nextImpactNode = result.addNode(above7, nextSourceFile);
        }        
        else if(normalizedNextRelativeImpact>=6)
        {
            nextImpactNode = result.addNode(above6, nextSourceFile);
        }        
        else if(normalizedNextRelativeImpact>=5)
        {
            nextImpactNode = result.addNode(above5, nextSourceFile);
        }        
        else if(normalizedNextRelativeImpact>=4)
        {
            nextImpactNode = result.addNode(above4, nextSourceFile);
        }        
        else if(normalizedNextRelativeImpact>=3)
        {
            nextImpactNode = result.addNode(above3, nextSourceFile);
        }        
        else if(normalizedNextRelativeImpact>=2)
        {
            nextImpactNode = result.addNode(above2, nextSourceFile);
        }
        else if(normalizedNextRelativeImpact>=1)
        {
            nextImpactNode = result.addNode(above1, nextSourceFile);
        }        
                                                                                                
        if(nextImpactNode != null)
        {
            Number nextOwnDependsUpon = sourceFileToDependsUpon.get(nextSourceFile)
            Number nextDependsUponIncrease = sourceFileToDependsUponIncrease.get(nextSourceFile)
            int nextDependsUponIncreaseInPercent = nextDependsUponIncrease*100.0
            Number nextUsedFrom = sourceFileToUsedFrom.get(nextSourceFile)
            
            result.addNode(nextImpactNode, "Own 'depends upon': " + nextOwnDependsUpon + " - increase of 'depends upon' over max 'to' 'depends upon': "+nextDependsUponIncreaseInPercent+"% - used from "+ (nextUsedFrom-1) +" source file(s)" )

            Map dependsUponToReferenced = [:]
            List<ElementAccess> referenced = sourceFileToReferenced.get(nextSourceFile)            

            referenced.each
            {
                JavaSourceFileAccess to ->
                Number toDependsUpon = sourceFileToDependsUpon.get(to);
                if(toDependsUpon != null)
                {
                    List<JavaSourceFileAccess> toSourceFiles = dependsUponToReferenced.get(toDependsUpon);
                    if(toSourceFiles == null)
                    {
                        toSourceFiles = [];
                        dependsUponToReferenced.put(toDependsUpon,toSourceFiles);
                    }
                    toSourceFiles.add(to);
                } 
            }
                        
           //Sort
           dependsUponToReferenced = dependsUponToReferenced.sort{a, b -> b.key <=> a.key}
           for(nextReferencedEntry in dependsUponToReferenced)
           {
               NodeAccess nextNode = result.addNode(nextImpactNode, "'to' 'depends upon': "+Integer.toString(nextReferencedEntry.key))
               for(toSourceFile in nextReferencedEntry.value)
               {
                   result.addNode(nextNode, toSourceFile)
               }
           }
        }
    }
}]]></source>
    <parameterDefinitions>
        <parameterDefinition name="timeout" type="Integer"
                             description="When scripts are scheduled for automated execution they time out after the specified number of seconds. The timeout must be greater than '0'."
                             defaultValue="10" candidates=""></parameterDefinition>
        <parameterDefinition name="output" type="String"
                             description="When a path is specified the output of the script is written into this file. The use of an absolute path (i.e. starting with '/' or 'C:/') is not recommended. It might not be cross-platform compatible."
                             defaultValue="" candidates=""></parameterDefinition>
    </parameterDefinitions>
    <languages>
        <language>Java</language>
    </languages>
</script>