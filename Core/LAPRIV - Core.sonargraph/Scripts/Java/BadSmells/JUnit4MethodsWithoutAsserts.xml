<?xml version="1.0" ?>
<script version="12.3.0.766">
    <description>Identifies @Test annotated methods that do not contain any assertion.</description>
    <source><![CDATA[//Define collections that are used in helper methods. Don't use "def" or type, so they appear in the correct scope.
methodsWithAsserts = new HashSet<>()
methodsWithoutAsserts = new HashSet<>()
currentlyChecking = new HashSet<>()

//Define visitor and implement relevant methods
ICoreVisitor v = javaAccess.createVisitor()

//only process types that are a JUnit4 test class
v.onType
{
    JavaTypeAccess type ->
    
    if (type.isExternal())
    {
        return
    }
    
    //println "Examining: $type"
    
    if (!type.isTopLevel() || type.isEnum())
    {
        return
    }
    
    
    if (!isJUnit4Test(type))
    {
        return
    }
    
    //println "Is Junit test: $type"
    v.visitChildren(type)
}

//only process test methods
v.onMethod
{
    JavaMethodAccess method ->
    if (isTestMethod(method))
    {
        currentlyChecking.clear()
        if (!usesAsserts(method))
        {
            result.addWarningIssue(method, "Useless Test Method" , "Method without any asserts")
            result.addElement(method)
            println method
        }
    }
}

//Traverse the model
coreAccess.visitModel(v)


//Helper methods
def isJUnit4Test(JavaTypeAccess type)
{
    return hasDependencyToTestAnnotation(type) || isSuperTypeTest(type);
}

def isSuperTypeTest(JavaTypeAccess type)
{
    List<JavaTypeAccess> superTypes = type.getReferencedElements(Aggregator.TYPE, true, false, false,
        DependencyKind.EXTENDS)
    for (JavaTypeAccess superType : superTypes)
    {
        //println "   Level $level extends/implements $superType"        
        if (isJUnit4Test(superType))
        {
            return true;
        }
        
        if (isSuperTypeTest(superType))
        {
            return true;
        }
    }
    
    return false;
}

def isTestMethod(JavaMethodAccess method)
{
    //check recursively if called methods have references to asserts
    return hasDependencyToTestAnnotation(method)
}

def hasDependencyToTestAnnotation(ElementAccess element)
{
    List<ElementAccess> elements = element.getReferencedElementsRecursively(Aggregator.TYPE, true, false, false, JavaDependencyKind.HAS_ANNOTATION).findAll()
    {
        ElementAccess it ->
        return it.getName().startsWith("org.junit.Test")
    }
    
    //println "$element has " + elements.size() + " dependencies to test annotation";
    return !elements.isEmpty()
}

def usesAsserts(JavaMethodAccess method)
{
    //Prevent Stackoverflow exceptions
    currentlyChecking.add(method)
    
    //Don't check already processed methods 
    if (methodsWithAsserts.contains(method))
    {
        return true
    }
    
    if (methodsWithoutAsserts.contains(method))
    {
        return false
    }
    
    //Get all references to org.junit.Assert.
    //using *Recursively() to handle anonymous inner classes with references to Assert.
    List<ElementAccess> elements = method.getReferencedElementsRecursively(Aggregator.TYPE, true, false, false).findAll()
    {
        ElementAccess it ->
        return it.getName().startsWith("org.junit.Assert")
    }
    if (!elements.isEmpty())
    {
        methodsWithAsserts.add(method)
        return true
    }
    
    //check called internal methods 
    for (ElementAccess called : method.getReferencedElementsRecursively(Aggregator.METHOD, true, true, false))
    {
        //traverse the call hierarchy recursively
        if (!currentlyChecking.contains(called))
        {
            if(usesAsserts(called))
            {
                methodsWithAsserts.add(method)
                return true
            }
            else
            {
                methodsWithoutAsserts.add(called)
            }
        }
        
    }
    methodsWithoutAsserts.add(method)
    
    return false
}]]></source>
    <parameterDefinitions>
        <parameterDefinition name="timeout" type="Integer"
                             description="When scripts are scheduled for automated execution they time out after the specified number of seconds. The timeout must be greater than '0'."
                             defaultValue="10" candidates=""></parameterDefinition>
        <parameterDefinition name="output" type="String"
                             description="When a path is specified the output of the script is written into this file. The use of an absolute path (i.e. starting with '/' or 'C:/') is not recommended. It might not be cross-platform compatible."
                             defaultValue="" candidates=""></parameterDefinition>
    </parameterDefinitions>
    <languages>
        <language>Java</language>
    </languages>
</script>