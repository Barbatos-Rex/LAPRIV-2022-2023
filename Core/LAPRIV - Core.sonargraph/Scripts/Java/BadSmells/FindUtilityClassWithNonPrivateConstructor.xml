<?xml version="1.0" ?>
<script version="12.3.0.766">
    <description>Identifies utility classes that should not be instantiable.</description>
    <source><![CDATA[IJavaVisitor v = javaAccess.createVisitor()

NodeAccess publicConstructorsNode = result.addNode("Public constructors of utility classes (should be private)");
NodeAccess utilityClassesWithoutConstructorNode = result.addNode("Utility classes without constructor (should have a private constructor)");

List<JavaTypeAccess> utilityClassesWihoutConstructors = new ArrayList<>();

v.onType
{
	JavaTypeAccess type ->
    	if (type.isExternal() || type.isExcluded() || type.isInterface())
	{
		return;
	}
	
	if (type.getReferencedElements(Aggregator.TYPE, false, DependencyKind.EXTENDS, DependencyKind.IMPLEMENTS).size() > 0)
    {
        //exclude type that extends another class
        return;
    }
		
	boolean hasTypeOnlyStaticMethods = true;
	boolean hasNonConstructorMethods = false;
	boolean hasConstructors = false;
		
	List<JavaMethodAccess> publicConstructors = new ArrayList<>();
	for (JavaMethodAccess method : type.getMethods())
	{
		if(method.isDefinedInEnclosingElement())
		{
			if (method.isConstructor())
			{
				hasConstructors = true;
				if (!method.isPrivate())
				{
					publicConstructors.add(method);
				}
			}
			else 
			{
				hasNonConstructorMethods = true;
				if (!method.isStatic())
				{
					hasTypeOnlyStaticMethods = false; 
				}
			}
		}
	}
		
	if (hasNonConstructorMethods && hasTypeOnlyStaticMethods)
	{
		//This is a utility class
		for (JavaMethodAccess nextConstructor : publicConstructors)
		{
			result.addNode(publicConstructorsNode, nextConstructor);
			result.addWarningIssue(nextConstructor, "Constructor of utility class should be private", type.getName()) 
		}
		if(!hasConstructors)
		{
			utilityClassesWihoutConstructors.add(type);
		}
	}
	
	v.visitChildren(type);
}

//Traverse the model
javaAccess.visitModel(v)

for (JavaTypeAccess nextType : utilityClassesWihoutConstructors)
{	
	result.addNode(utilityClassesWithoutConstructorNode, nextType);
	result.addWarningIssue(nextType, "Utility class should have a private constructor", nextType.getName()) 
}]]></source>
    <parameterDefinitions>
        <parameterDefinition name="timeout" type="Integer"
                             description="When scripts are scheduled for automated execution they time out after the specified number of seconds. The timeout must be greater than '0'."
                             defaultValue="10" candidates=""></parameterDefinition>
        <parameterDefinition name="output" type="String"
                             description="When a path is specified the output of the script is written into this file. The use of an absolute path (i.e. starting with '/' or 'C:/') is not recommended. It might not be cross-platform compatible."
                             defaultValue="" candidates=""></parameterDefinition>
    </parameterDefinitions>
    <languages>
        <language>Java</language>
    </languages>
</script>