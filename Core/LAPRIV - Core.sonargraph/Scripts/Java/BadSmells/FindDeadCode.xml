<?xml version="1.0" ?>
<script version="12.3.0.766">
    <description>Script that detects potentially dead types, methods and fields.</description>
    <source><![CDATA[/**
* Script that detects potentially dead types, methods and fields.
* It does not detect isolated cycles of dead code. It could be improved by visiting the model several times and check if there are elements left that are only referenced by previously detected dead code.
*
* IMPORTANT!
* The code identified as "potentially dead" is only a hint - only YOU as the architect / developer of the system know if the code is referenced via dependency injection / reflection.
* Delete the identified code with great care.
*/

/////////////////// Start of configuration ////////////////////////////////////////
toleratedClassNames = new ArrayList<>();
toleratedClassNames.add("\\S+\\.package-info");

//Application classes (examples)
toleratedClassNames.add("com\\.hello2morrow\\.sonargraph\\.build\\.application\\.SonargraphBuildApplication");
toleratedClassNames.add("com\\.hello2morrow\\.sonargraph\\.build\\.client\\.ant\\.SonargraphReportTask");

//UI classes referenced by plugin.xml (examples)
toleratedClassNames.add("com\\.hello2morrow\\.sonargraph\\.ui\\.standalone\\.application\\.\\S+");
toleratedClassNames.add("com\\.hello2morrow\\.sonargraph\\.ui\\.\\S+\\.commandhandler\\.\\S+");
toleratedClassNames.add("com\\.hello2morrow\\.sonargraph\\.ui.standalone.wizard.\\S+");
toleratedClassNames.add("com\\.hello2morrow\\.sonargraph\\.ui.\\S+CommandHandler");

//Instantiated via reflection
//toleratedClassNames.add("x\\.y\\.z\\.ByReflectionClassNamePattern");

//Tolerate classes that extend certain base classes
toleratedIfExtends = new ArrayList<>();
//toleratedIfExtends.add("x\\.y\\.z\\.SuperClassNamePattern");
toleratedIfExtends.add("com\\.hello2morrow\\.deadcode\\.ToleratedClass");

//Tolerate classes with specific annotations
toleratedTypeAnnotations = new ArrayList<>();
toleratedTypeAnnotations.add("javax.annotation.Resource");

//Method names
toleratedMethodNames = new ArrayList<>();
//toleratedMethodNames.add('\\S+\\$_\\S+_closure\\d+.\\S+()'); //groovy closures 

mainMethodPattern = "\\S+\\.main\\(String\\[\\]\\) : void";

//Tolerate methods with specific annotations
toleratedMethodAnnotations = new ArrayList<>();
toleratedMethodAnnotations.add("org.junit.Test");
toleratedMethodAnnotations.add("javax.annotation.Resource");

List<String> toleratedMethodsOfSubClasses = new ArrayList<>();
toleratedMethodsOfSubClasses.add('com.hello2morrow.foundation.propertyreader.BeanPropertyReader\$BeanAdapter');

//Field names
toleratedFieldNames = new ArrayList<>();
//toleratedFieldNames.add("x\\.y\\.z\\.ClassNamePattern\\.FieldNamePattern"

//Tolerate fields with specific annotations
toleratedFieldAnnotations = new ArrayList<>();
toleratedFieldAnnotations.add("javax.annotation.Resource");

//Tolerate fields required for serialization
serializableClassList = new ArrayList<>();
serializableClassList.add("java.lang.Exception");
serializableClassList.add("java.io.Serializable");
serialVersionUIDFieldName = "serialVersionUID";

//Tolerate if field is contained in tolerated subclass
toleratedFieldNamesOfSubclasses = new ArrayList<>();
toleratedFieldNamesOfSubclasses.add('x\\.y\\.z\\.ClassNamePattern');

/////////////////// End of configuration ////////////////////////////////////////

deadTypes = new ArrayList<>();
deadMethods = new ArrayList<>();
deadFields = new ArrayList<>();
toleratedTypes = new ArrayList<>();
toleratedMethods = new ArrayList<>();
toleratedFields = new ArrayList<>();

//Create nodes for the "tree tab"
NodeAccess deadTypeNode = result.addNode("Potentially dead types");
NodeAccess deadMethodsNode = result.addNode("Potentially dead methods");
NodeAccess deadFieldsNode = result.addNode("Potentially dead fields");
NodeAccess toleratedTypesNode = result.addNode("Tolerated types");
NodeAccess toleratedMethodsNode = result.addNode("Tolerated methods");
NodeAccess toleratedFieldsNode = result.addNode("Tolerated fields");

//function to check if a dependency to an annotation exists
def hasAnnotation(ProgrammingElementAccess element, List toleratedAnnotations)
{
    // println "Checking for annotations on element: " + element;
    boolean annotationPresent = element.getOutgoingDependencies(Aggregator.TYPE, true, JavaDependencyKind.HAS_ANNOTATION).find
    {
        AggregatedDependencyAccess dep ->
        // println "   outgoing annotation dependency: " + dep;
        for (String annotationClass : toleratedAnnotations)
        {
            if (dep.getTo().getName().equals(annotationClass))
            {
                return true;
            }
        }
        return false;
    }
    return annotationPresent;
}

def getAllSuperTypes(JavaTypeAccess type)
{
    List<JavaTypeAccess> superTypes = new ArrayList<>();
    for (JavaTypeAccess next : type.getReferencedElements(Aggregator.TYPE, true, false, false, JavaDependencyKind.EXTENDS, JavaDependencyKind.IMPLEMENTS))
    {
        if (superTypes.contains(next))
        {
            continue;
        }
        superTypes.add(next);
        for (JavaTypeAccess nextSuper : getAllSuperTypes(next))
        {
            if (superTypes.contains(nextSuper))
            {
                continue;
            }
            superTypes.add(nextSuper);
        }
    }
    return Collections.unmodifiableList(superTypes);
}

IJavaVisitor v = javaAccess.createVisitor();

//Check on source files and skip all external and Groovy source files since too much reflection is going on...
v.onSourceFile
{
    SourceFileAccess sourceFileAccess ->
    if (sourceFileAccess.isExternal() || sourceFileAccess.getFile() == null || sourceFileAccess.getFile().getName().endsWith(".groovy"))
    {
        //println "Skipping source file: " + sourceFileAccess.getName();
        return;
    }
    v.visitChildren(sourceFileAccess);
}

//Check for dead types
v.onType
{
    JavaTypeAccess type ->
    if(type.isExternal() || type.isExcluded())
    {
        return;
    }
    
    //Add elements so they show up in the elements tab, so we know what has been processed.
    result.addElement(type)
    
    boolean isToleratedExtends = getAllSuperTypes(type).find
    {
        JavaTypeAccess superType ->
        //println "   outgoing dependency: " + dep;
        for (String pattern : toleratedIfExtends)
        {
            if (superType.getName().matches(pattern))
            {
                return true;
            }
        }
        return false;
    }
    
    if (isToleratedExtends)
    {
        println "Tolerated type (extends): " + type
        toleratedTypes.add(type);
        v.visitChildren(type)
        return;
    }
    
    if (hasAnnotation(type, toleratedTypeAnnotations))
    {
        println "Tolerated type (annotation): " + type
        toleratedTypes.add(type);
        v.visitChildren(type)
        return;
    }
    
    for (String pattern : toleratedClassNames)
    {
        if (type.getName().matches(pattern))
        {
            println "Tolerated type (pattern): " + type
            toleratedTypes.add(type);
            v.visitChildren(type);
            return;
        }
    }
    
    List usingTypes = type.getReferencingElementsRecursively(Aggregator.TYPE, true, false)
    int numberOfIncomingDependencies = usingTypes.size()
    if(numberOfIncomingDependencies == 0)
    {
        //println "Dead type detected: " + type
        deadTypes.add(type);
        //we continue checking on methods and fields, because classes with main(String[]) methods will be removed from the dead types list and we want to find
        //unused methods and fields in those classes as well.
    }
    v.visitChildren(type);
}

//Check for dead methods
v.onMethod
{
    JavaMethodAccess method ->
    
    if (method.isExternal() || method.isExcluded() || method.isInitializer() || !method.isDefinedInEnclosingElement() || method.isCompilerGenerated())
    {
        return;
    }
    
    if (method.isOverriding())
    {
        //println "  method " + method + " is overriding";
        return;
    }
    
    JavaTypeAccess type = method.getParent();
    if (hasAnnotation(method, toleratedMethodAnnotations))
    {
        println "Tolerated method (annotation): " + method
        toleratedMethods.add(method);
        if(deadTypes.remove(type) != null)
        {
            println "Type " + type + " contains tolerated method (annotation) " + method + " and is therefore not dead code."
            if (!toleratedTypes.contains(type))
            {
                toleratedTypes.add(type);
            }
        }
        return;
    }
    
    for (String toleratedSuperClass : toleratedMethodsOfSubClasses)
    {
        if (type.typeOf(toleratedSuperClass))
        {
            toleratedMethods.add(method);
            if (deadTypes.remove(type) != null)
            {
                println "Type " + type + " is a  tolerated subclass of " + toleratedSuperClass + " and is therefore not dead code";
                if (!toleratedTypes.contains(type))
                {
                    toleratedTypes.add(type);
                }
            }
            return;
        }
    }
    
    if (method.toString().matches(mainMethodPattern))
    {
        toleratedMethods.add(method);
        if (deadTypes.remove(type) != null)
        {
            println "Type " + type + " has a main method and is therefore not dead code";
            if (!toleratedTypes.contains(type))
            {
                toleratedTypes.add(type);
            }
            return;
        }
    }
    
    for (String pattern : toleratedMethodNames)
    {
        if (method.toString().matches(pattern))
        {
            toleratedMethods.add(method);
            //println "    method is tolerated as it matches pattern " + pattern + ", " + method.getName();
            if(deadTypes.remove(type) != null)
            {
                println "Type " + type + " contains tolerated method (pattern) " + method + " and is therefore not dead code."
                if (!toleratedTypes.contains(type))
                {
                    toleratedTypes.add(type);
                }
            }
            return;
        }
    }
    
    List usingMethods = method.getReferencingElementsRecursively(Aggregator.METHOD, true, false);
    int numberOfIncomingDependencies = usingMethods.size()
    if(numberOfIncomingDependencies > 0)
    {
        //println "    method " + method + " has " + numberOfIncomingDependencies + " incoming dependencies" ;
        return;
    }
    
    deadMethods.add(method);
}

//check for dead fields
v.onField
{
    JavaFieldAccess field ->
    if (!field.isDefinedInEnclosingElement())
    {
        return;
    }
    
    JavaTypeAccess type = (JavaTypeAccess) field.getParent();
    List<JavaTypeAccess> superTypes = getAllSuperTypes(type);
    
    for (String next : toleratedFieldNamesOfSubclasses)
    {
        for (JavaTypeAccess nextType : superTypes)
        {
            if (nextType.getName().matches(next))
            {
                toleratedFields.add(field);
                if(deadTypes.remove(type) != null)
                {
                    println "Type " + type + " contains tolerated field (subclass) " + field + " and is therefore not dead code."
                    if (!toleratedTypes.contains(type))
                    {
                        toleratedTypes.add(type);
                    }
                }
                return;
            }
        }
    }
    
    if (hasAnnotation(field, toleratedFieldAnnotations))
    {
        //println "Tolerated field (annotation): " + field
        toleratedFields.add(field);
        if(deadTypes.remove(type) != null)
        {
            println "Type " + type + " contains tolerated field (annotation) " + field + " and is therefore not dead code."
            if (!toleratedTypes.contains(type))
            {
                toleratedTypes.add(type);
            }
        }
        return;
    }
    
    for(String serializableClass : serializableClassList)
    {
        if (type.typeOf(serializableClass))
        {
            if (field.getShortName().equals(serialVersionUIDFieldName) && field.isStatic())
            {
                toleratedFields.add(field);
                return;
            }
        }
    }
    
    for (String pattern : toleratedFieldNames)
    {
        if (field.toString().matches(pattern))
        {
            toleratedFields.add(field);
            //println "Tolerated field (pattern): " + field
            if(deadTypes.remove(type) != null)
            {
                println "Type " + type + " contains tolerated field (pattern) " + field + " and is therefore not dead code."
                if (!toleratedTypes.contains(type))
                {
                    toleratedTypes.add(type);
                }
            }
            return;
        }
    }
    
    if (type.isEnum() && field.isPublic())
    {
        List using = field.getReferencingElementsRecursively(Aggregator.ELEMENT, true, false);
        using.remove(type); //if enum constant needs to override method, we have an incoming dependency
        if (!using.isEmpty())
        {
            //println "Enum constant $field.name is used within enum class $type.name";
            return;
        }
    }
    else
    {
        List using = field.getReferencingElementsRecursively(Aggregator.ELEMENT, false, false, JavaDependencyKind.READ_FIELD, JavaDependencyKind.READ_FIELD_INLINE);
        if (!using.isEmpty())
        {
            return;
        }
        for (JavaFieldAccess subclassField : field.getReferencingElementsRecursively(Aggregator.FIELD, false, false, JavaDependencyKind.MEMBER_DEFINITION_PROVIDED_BY))
        {
            //println "detected field used by subclass: " + subclassField.getName()
            using = subclassField.getReferencingElementsRecursively(Aggregator.ELEMENT, false, false, JavaDependencyKind.READ_FIELD, JavaDependencyKind.READ_FIELD_INLINE);
            if (!using.isEmpty())
            {
                return;
            }
        }
    }
    //println "  dead field: " + field;
    deadFields.add(field);
}

//Traverse the model
coreAccess.visitModel(v)

//Sort
deadTypes.sort
{it.getNameWithSignature()
};
deadMethods.sort
{it.getNameWithSignature()
};
deadFields.sort
{it.getNameWithSignature()
};
toleratedTypes.sort
{it.getNameWithSignature()
};
toleratedMethods.sort
{it.getNameWithSignature()
};
toleratedFields.sort
{it.getNameWithSignature()
};

long numberOfStatementsInDeadCode = 0;
for(TypeAccess type : deadTypes)
{
    //Add child node for the detected type
    result.addNode(deadTypeNode, type);
    
    def nos = type.getNumberOfStatementsMetric();
    if(nos != null)
    {
        numberOfStatementsInDeadCode += nos.intValue();
    }
    println "Unused type: " + type.getName();
    //Create warning type issue
    result.addWarningIssue(type, "Potentially dead type", "Type has no incoming dependencies")
}

for(MethodAccess method : deadMethods)
{
    if (deadTypes.contains(method.getParent()))
    {
        //We don't want to add methods for unused types -> this will screw up the "% of dead code" metric
        continue;
    }
    //Add child node for the detected method
    result.addNode(deadMethodsNode, method);
    numberOfStatementsInDeadCode += method.getNumberOfStatementsMetric().intValue();
    //println "Unused method: " + next;     
    //Create warning type issue
    result.addWarningIssue(method, "Potentially dead method", "Method has no incoming dependencies")
}

for (JavaFieldAccess next : deadFields)
{
    if(deadTypes.contains(next.getParent()))
    {
        continue;
    }
    result.addNode(deadFieldsNode, next);
    result.addWarningIssue(next, "Potentially dead field", "Field has no incoming dependencies");
    //We simply assume that a field declaration is one statement 
    numberOfStatementsInDeadCode++;
}

for (JavaTypeAccess type : toleratedTypes)
{
    result.addNode(toleratedTypesNode, type);
}

for (JavaMethodAccess method : toleratedMethods)
{
    result.addNode(toleratedMethodsNode, method);
}

for (JavaFieldAccess field : toleratedFields)
{
    result.addNode(toleratedFieldsNode, field);
}

float percentageOfDeadCode = numberOfStatementsInDeadCode * 100.0 / coreAccess.getNumberOfStatementsMetric();

def metricId = coreAccess.getOrCreateMetricId("Percentage of dead code", "Potentially dead code (%)", "Percentage of potentially dead code", true, 0.0, new Float(parameterUpperThreshold));
result.addMetricValue(metricId, coreAccess, percentageOfDeadCode);

println "\nNumber of statements (total): " + coreAccess.getNumberOfStatementsMetric();
println "Number of statements (dead code): " + numberOfStatementsInDeadCode
println "Percentage of (potentially) dead code: " + percentageOfDeadCode + "%"
println "\nNOTE: Check the result carefully and edit the configuration inside the script to avoid false positives!"
]]></source>
    <parameterDefinitions>
        <parameterDefinition name="timeout" type="Integer"
                             description="When scripts are scheduled for automated execution they time out after the specified number of seconds. The timeout must be greater than '0'."
                             defaultValue="10" candidates=""></parameterDefinition>
        <parameterDefinition name="output" type="String"
                             description="When a path is specified the output of the script is written into this file. The use of an absolute path (i.e. starting with '/' or 'C:/') is not recommended. It might not be cross-platform compatible."
                             defaultValue="" candidates=""></parameterDefinition>
        <parameterDefinition name="upperThreshold" type="Integer"
                             description="upper threshold for percentage of unused code." defaultValue="5"
                             candidates=""></parameterDefinition>
    </parameterDefinitions>
    <languages>
        <language>Java</language>
    </languages>
</script>