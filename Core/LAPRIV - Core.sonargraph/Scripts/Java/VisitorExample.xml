<?xml version="1.0" ?>
<script version="12.3.0.766">
    <description>Script to illustrate the usage of IJavaVisitor.</description>
    <source><![CDATA[/*Groovy Script to illustrate the usage of IJavaVisitor object. The Script visits the different elements of the physical and logical models
using both inherited methods from ICoreVisitor and methods specific to IJavaVisitor and creates a Tree illustrating the way that 
programming elements and logical namespaces have been visited.*/

//Allows to visit all elements of the model
IJavaVisitor javaVisitor = javaAccess.createVisitor()

//Root nodes for elements that are going to be visited using methods inherited from ICoreVisitor
NodeAccess inheritedFromCoreVisitorNode = result.addNode("Internal (non-excluded) Elements calculated by methods inherited from CoreVisitor")
NodeAccess parserElementsNode = result.addNode(inheritedFromCoreVisitorNode, "Parser Elements")
NodeAccess moduleNamespacesNode = result.addNode(inheritedFromCoreVisitorNode, "Logical Module Namespaces")
NodeAccess systemNamespacesNode = result.addNode(inheritedFromCoreVisitorNode, "Logical System Namespaces")

//START: Variables to store elements visited by the methods inherited from ICoreVisitor
def PROGRAMMING_ELEMENTS = 'Programming Elements'
def TYPES = 'Types'
def METHODS = 'Methods'
def ROUTINES = 'Routines'
def FIELDS = 'Fields'
def LOGICAL_MODULE_NAMESPACES = 'Logical Module Namespaces'
def PART = 'Part'
def NON_PART = 'Non Part'
def LOGICAL_EXTERNALS_SYSTEM = "Logical External System"
def LOGICAL_EXTERNALS_MODULE = "Logical External Module"

def calculatedFromCoreVisitor = [:]
calculatedFromCoreVisitor[PROGRAMMING_ELEMENTS] = new HashSet()
calculatedFromCoreVisitor[TYPES] = new HashSet()
calculatedFromCoreVisitor[METHODS] = new HashSet()
calculatedFromCoreVisitor[ROUTINES] = new HashSet()
calculatedFromCoreVisitor[FIELDS] = new HashSet()

def logicalModuleNamespaces = [:]
logicalModuleNamespaces[PART] = new HashSet()
logicalModuleNamespaces[NON_PART] = new HashSet()

def logicalSystemNamespaces = [:]
logicalSystemNamespaces[PART] = new HashSet()
logicalSystemNamespaces[NON_PART] = new HashSet()
//END: Variables to store elements visited by the methods inherited from ICoreVisitor

//Root node for elements visited with specific methods of IJavaVisitor
NodeAccess javaVisitorSpecificNode = result.addNode("Internal (non-excluded) Elements calculated by IJavaVisitor specific methods")
NodeAccess javaParserElementsNode = result.addNode(javaVisitorSpecificNode, "Parser Elements")

//START: Variables to store elements visited by specific methods of IJavaVisitor
def JAVA_CLASSES = 'Java Classes'
def calculatedFromJavaVisitor = [:]
calculatedFromJavaVisitor[JAVA_CLASSES] = new HashSet()
//END: Variables to store elements visited by specific methods of IJavaVisitor


//***************************************Inherited From ICoreVisitor***********************************************

//Module visiting
javaVisitor.onModule {
    JavaModuleAccess javaModuleAccess ->
    if (!javaModuleAccess.isExternal() && !javaModuleAccess.isExcluded())
	{
		//We visit modules' children
 	    javaVisitor.visitChildren(javaModuleAccess)
	}
}

//RootDirectoryPath visiting
javaVisitor.onRootDirectory {
    DirectoryAccess rootDirectoryAccess ->
    //We do nothing here, this just illustrates how to visit RootDirectoryPaths. 
	//Since RootDirectoryPath extends from DirectoryPath , they are already being visited inside
	//the onDirectory block and thus their chlidren are being visited.
}

//Directory visiting
javaVisitor.onDirectory {
    DirectoryAccess directoryAccess ->
    if (!directoryAccess.isExternal() && !directoryAccess.isExcluded())
	{
		//We visit Directories' children
		javaVisitor.visitChildren(directoryAccess)
	}
}

//SourceFile visiting (including header files)
javaVisitor.onSourceFile {
    JavaSourceFileAccess javaSourceFileAccess ->
     if (!javaSourceFileAccess.isExternal() && !javaSourceFileAccess.isExcluded())
	{
		//We visit SourceFiles' children
		javaVisitor.visitChildren(javaSourceFileAccess)
	}
}

//ProgrammingElement visiting. This visits all elements detected by the parser without specific type distinction
javaVisitor.onProgrammingElement {
    ProgrammingElementAccess programmingElementAccess ->
    if (!programmingElementAccess.isExternal() && !programmingElementAccess.isExcluded())
	{
		//We store each ProgrammingElement on its collection
		calculatedFromCoreVisitor[PROGRAMMING_ELEMENTS].add(programmingElementAccess)
		
		//We visit each ProgrammingElement's child
		javaVisitor.visitChildren(programmingElementAccess)
	}
}

//Type visiting. We visit Classes
javaVisitor.onType {
    JavaTypeAccess javaTypeAccess ->
     if (!javaTypeAccess.isExternal() && !javaTypeAccess.isExcluded())
	{
		//We store each type on its collection
		calculatedFromCoreVisitor[TYPES].add(javaTypeAccess)
		
		//We don't need to call visitChildren here since a Type is a ProgrammingElement
		//and inside the onProgrammingElement block we already call visitChildren
	}
}

//Method visiting.
javaVisitor.onMethod {
    JavaMethodAccess javaMethodAccess ->
    if (!javaMethodAccess.isExternal() && !javaMethodAccess.isExcluded() && javaMethodAccess.isDefinedInEnclosingElement())
	{
		//We store each method on its collection
		calculatedFromCoreVisitor[METHODS].add(javaMethodAccess)
		
		//We don't need to call visitChildren here since a Method is a ProgrammingElement
		//and inside the onProgrammingElement block we already call visitChildren
	}
}

//Routine visiting. This visits methods only
javaVisitor.onRoutine {
    RoutineAccess routineAccess ->
     if (!routineAccess.isExternal() && !routineAccess.isExcluded())
	{
		//We store each routine on its collection
		calculatedFromCoreVisitor[ROUTINES].add(routineAccess)
		
		//We don't need to call visitChildren here since a Routine is a ProgrammingElement
		//and inside the onProgrammingElement block we already call visitChildren
	}
}

//Field visiting.
javaVisitor.onField {
    JavaFieldAccess javaFieldAccess ->
    if (!javaFieldAccess.isExternal() && !javaFieldAccess.isExcluded() && javaFieldAccess.isDefinedInEnclosingElement())
	{
		//We store each field on its collection
		calculatedFromCoreVisitor[FIELDS].add(javaFieldAccess)
		
		//We don't need to call visitChildren here since a Field is a ProgrammingElement
		//and inside the onProgrammingElement block we already call visitChildren
	}
}

//Logical module visiting
javaVisitor.onLogicalModule {
    JavaLogicalModuleAccess javaLogicalModuleAccess ->
    if (!javaLogicalModuleAccess.isExternal() && !javaLogicalModuleAccess.isExcluded())
	{
		//We visit each logical module's child
		javaVisitor.visitChildren(javaLogicalModuleAccess)
	}
}

javaVisitor.onLogicalModuleNamespace {
    JavaLogicalPackageAccess javaPackageAccess ->
    if (!javaPackageAccess.isExternal() && !javaPackageAccess.isExcluded())
	{
		//Part Modules: Only contain other modules as children
		//Non-Part Modules: Contain at least one Logical Programming Element as child
		//We store separately part and non-part logical module namespaces 
		if (javaPackageAccess.isPart()) 
		{
			logicalModuleNamespaces[PART].add(javaPackageAccess)
		}
		 else 
		{
			logicalModuleNamespaces[NON_PART].add(javaPackageAccess)
		}
		
		//We visit each logical module namespace's child
		javaVisitor.visitChildren(javaPackageAccess)
	}
}

javaVisitor.onLogicalSystem {
    LogicalSystemAccess logicalSystemAccess ->
    if (!logicalSystemAccess.isExternal() && !logicalSystemAccess.isExcluded())
	{
		//We visit each logical module's child
		javaVisitor.visitChildren(logicalSystemAccess)
	}
}

javaVisitor.onLogicalSystemNamespace {
    JavaLogicalPackageAccess javaPackageAccess ->
    if (!javaPackageAccess.isExternal() && !javaPackageAccess.isExcluded())
	{
		//Part Modules: Only contain other modules as children
		//Non-Part Modules: Contain at least one Logical Programming Element as child
		//We store separately part and non-part logical system namespaces 
		if (javaPackageAccess.isPart()) 
		{
			logicalSystemNamespaces[PART].add(javaPackageAccess)
		}
		 else 
		{
			logicalSystemNamespaces[NON_PART].add(javaPackageAccess)
		}
		
		//We visit each logical system namespace's child
		javaVisitor.visitChildren(javaPackageAccess)
	}
}

//***************************************IJavaVisitor Specific***********************************************

javaVisitor.onJavaClassFile {
    JavaClassFileAccess javaClassFileAccess ->
    if (!javaClassFileAccess.isExternal() && !javaClassFileAccess.isExcluded())
	{
		calculatedFromJavaVisitor[JAVA_CLASSES].add(javaClassFileAccess)
		javaVisitor.visitChildren(javaClassFileAccess)
	}
}

//Traverse the model
javaAccess.visitModel(javaVisitor)

//Looping over the map for programming elements calculated with the methods inherited from ICoreVisitor
calculatedFromCoreVisitor.each {
	key, value ->
	
	//We create one node for each key of the map and we set the parserElementsNode as parent
	NodeAccess node = result.addNode(parserElementsNode, "${key}")
	value.each {
		access ->
		
		//We create one node for each Element Access under the prevously created node
		result.addNode(node, access)
	}
}

//Looping over the map for programming elements calculated with the IJavaVisitor specific methods
calculatedFromJavaVisitor.each{
	key, value ->
	
	//We create one node for each key of the map and we set the javaParserElementsNode as parent
	NodeAccess node = result.addNode(javaParserElementsNode, "${key}")
	value.each {
		access ->
		
		//We create one node for each Element Access under the prevously created node
		result.addNode(node, access)
	}
}

//Looping over the map for logical module namespaces calculated with the methods inherited from ICoreVisitor
logicalModuleNamespaces.each{
	key, value ->
	
	//We create one node for each key of the map and we set the moduleNamespacesNode as parent
	NodeAccess node = result.addNode(moduleNamespacesNode, "Logical ${key} Namespaces")
	value.each {
		access ->
		
		//We create one node for each Element Access under the prevously created node
		result.addNode(node, access)
	}
}

//Looping over the map for logical system namespaces calculated with the methods inherited from ICoreVisitor
logicalSystemNamespaces.each{
	key, value ->
	//We create one node for each key of the map and we set the systemNamespacesNode as parent
	NodeAccess node = result.addNode(systemNamespacesNode, "Logical ${key} Namespaces")
	value.each {
		access ->
		
		//We create one node for each Element Access under the prevously created node
		result.addNode(node, access)
	}
}]]></source>
    <parameterDefinitions>
        <parameterDefinition name="timeout" type="Integer"
                             description="When scripts are scheduled for automated execution they time out after the specified number of seconds. The timeout must be greater than '0'."
                             defaultValue="10" candidates=""></parameterDefinition>
        <parameterDefinition name="output" type="String"
                             description="When a path is specified the output of the script is written into this file. The use of an absolute path (i.e. starting with '/' or 'C:/') is not recommended. It might not be cross-platform compatible."
                             defaultValue="" candidates=""></parameterDefinition>
    </parameterDefinitions>
    <languages>
        <language>Java</language>
    </languages>
</script>